・テーブル...ひとつひとつの表のこと。
・レコード...テーブルに格納されている一行一行のデータのこと。
・カラム...テーブルにある列のこと。
・クエリ...データベースを使用する際の言語。
クエリは、SQLが用意してくれているものは大文字、自分で作ったテーブルやカラムなどは小文字で表記する。
・CREAET TABLE テーブル名 ();...テーブルの作成。複数のレコードを管理することが多いので、基本複数形にする。
・DROP TABLE テーブル名...テーブルの削除。
・INSORT INTO テーブル名 (カラム) VALUES (渡したい値)...で、レコードの挿入ができる。
・SELECT * FROM テーブル名...で、テーブルの表示ができる。
・データ型
整数:INT, 実数:DECIMAL, 文字列:CHAR(固定長の文字列), VARCHAR(それ以外の文字列), ENUM(1つの値だけを格納), SET(複数の値を格納)
真偽値:BOOL 日時:DATE(日付), TIME(時間), DATETIME(日時)
・レコードの挿入は全ての値にカラムを設定していなくても大丈夫。
・CHECK...指定した範囲内の値じゃないとエラーになる。
・UNIQUE...指定した値が重複したときにエラーになる。
・SELECT * FROM テーブル名 WHERE レコードと、取り出したい条件...で、レコードの抽出ができる。
・AND/OR/BETWEEN/IN...条件の組み合わせに使用する。
・DELETE FROM テーブル名 WHERE 削除したいレコードと条件...で、レコードの削除ができる。
・CONCAT...文字列同士を連結してくれる。
・SELECT * FROM テーブル名 ORDER BY レコード...で、小さい順に並べてくれる。大きい順にしたい場合は、最後にDESCを付ける。
・LOAD DATA LOCAL INFILE '移したい外部ファイル' INTO TABLE 移したい場所(テーブル)...で、外部ファイルを読み込める。
ただし、この下にオプションを付け加える必要がある。
・localhost = 127.0.0.1
dockerコマンドからmysqlに入るところ
・docker-compose up -d
dockerのコンテナを立ち上げる、複数のコンテナを立ち上げることができてdocker-compose.ymlの通りに処理してくれる。
dockerコマンドで立ち上げてしまうと、一個ずつしかコンテナを立ち上げられないので、処理の順番通りに作らないといけなくて大変。
・docker exec -it -u 1000:1000(無くても大丈夫) db-practice(DBコンテナ名) bash
mysql -u (ユーザー名) -p(パスワード) -h (ホスト名);
dockerのコンテナにアクセスしてから、MySQLに入る方法。
